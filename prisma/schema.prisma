generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                       Int            @id @default(autoincrement())
  name                     String
  email                    String         @unique(map: "User_email_key")
  password                 String
  wa_number                String?
  line_id                  String?
  role                     String         @default("USER")
  major                    String?
  ktmPhoto                 String?
  institution              Institution?
  createdAt                DateTime       @default(now())
  institution_name         String?
  notification             notification[]
  payment                  payment[]
  seminarreg               seminarreg[]
  team_team_leaderIdTouser team[]         @relation("team_leaderIdTouser")
  tempindividu             tempindividu?
  team_teammembers         team[]         @relation("teammembers")

  @@map("user")
}

model status {
  id                                   Int          @id @default(autoincrement())
  description                          String
  seminarreg_seminarreg_statusTostatus seminarreg[] @relation("seminarreg_statusTostatus")
  team_team_statusTostatus             team[]       @relation("team_statusTostatus")
}

model division {
  id    Int     @id @default(autoincrement())
  name  String  @unique(map: "Division_name_key")
  staff staff[]
}

model notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  title     String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  staffId   Int
  staff     staff    @relation(fields: [staffId], references: [id], map: "Notification_staffId_fkey")
  user      User     @relation(fields: [userId], references: [id], map: "Notification_userId_fkey")

  @@index([staffId], map: "Notification_staffId_fkey")
  @@index([userId], map: "Notification_userId_fkey")
}

model payment {
  id           Int         @id @default(autoincrement())
  userId       Int?
  SeminarRegId Int?
  filePath     String
  submittedAt  DateTime    @default(now())
  teamId       Int?
  seminarreg   seminarreg? @relation(fields: [SeminarRegId], references: [id], map: "Payment_SeminarRegId_fkey")
  team         team?       @relation(fields: [teamId], references: [id], map: "Payment_teamId_fkey")
  user         User?       @relation(fields: [userId], references: [id], map: "Payment_userId_fkey")

  @@index([SeminarRegId], map: "Payment_SeminarRegId_fkey")
  @@index([teamId], map: "Payment_teamId_fkey")
  @@index([userId], map: "Payment_userId_fkey")
}

model pendinguserverification {
  id        Int      @id @default(autoincrement())
  name      String?
  email     String   @unique(map: "pendinguserverification_email_key")
  password  String?
  otp       String
  otpSentAt DateTime @default(now())
  otpTries  Int      @default(0)
  purpose   String
}

model program {
  id          Int          @id @default(autoincrement())
  name        String       @unique(map: "Program_name_key")
  type        String
  description String?
  seminarreg  seminarreg[]
  team        team[]
}

model seminarreg {
  id                               Int          @id @default(autoincrement())
  userId                           Int
  programId                        Int
  status                           Int
  registeredAt                     DateTime     @default(now())
  payment                          payment[]
  program                          program      @relation(fields: [programId], references: [id], map: "SeminarReg_programId_fkey")
  status_seminarreg_statusTostatus status       @relation("seminarreg_statusTostatus", fields: [status], references: [id], map: "SeminarReg_status_fkey")
  user                             User         @relation(fields: [userId], references: [id], map: "SeminarReg_userId_fkey")
  submission                       submission[]

  @@index([programId], map: "SeminarReg_programId_fkey")
  @@index([status], map: "SeminarReg_status_fkey")
  @@index([userId], map: "SeminarReg_userId_fkey")
}

model staff {
  id           Int            @id @default(autoincrement())
  name         String
  email        String         @unique(map: "Staff_email_key")
  password     String
  role         staff_role
  createdAt    DateTime       @default(now())
  divisionId   Int
  notification notification[]
  division     division       @relation(fields: [divisionId], references: [id], map: "Staff_divisionId_fkey")

  @@index([divisionId], map: "Staff_divisionId_fkey")
}

model submission {
  id                                 Int              @id @default(autoincrement())
  filePath                           String
  submittedAt                        DateTime         @default(now())
  Promotion                          String?
  Task                               String?
  seminarId                          Int?
  stage                              submission_stage
  teamId                             Int?
  seminarreg                         seminarreg?      @relation(fields: [seminarId], references: [id], map: "Submission_seminarId_fkey")
  team_submission_teamIdToteam       team?            @relation("submission_teamIdToteam", fields: [teamId], references: [id], map: "Submission_teamId_fkey")
  team_team_submissionIdTosubmission team[]           @relation("team_submissionIdTosubmission")

  @@index([seminarId], map: "Submission_seminarId_fkey")
  @@index([teamId], map: "Submission_teamId_fkey")
}

model team {
  id                                       Int          @id @default(autoincrement())
  name                                     String       @unique(map: "Team_name_key")
  code                                     String       @unique(map: "Team_code_key")
  createdAt                                DateTime     @default(now())
  leaderId                                 Int
  programId                                Int
  status                                   Int          @default(1)
  submissionId                             Int?
  payment                                  payment[]
  submission_submission_teamIdToteam       submission[] @relation("submission_teamIdToteam")
  user_team_leaderIdTouser                 User         @relation("team_leaderIdTouser", fields: [leaderId], references: [id], map: "Team_leaderId_fkey")
  program                                  program      @relation(fields: [programId], references: [id], map: "Team_programId_fkey")
  status_team_statusTostatus               status       @relation("team_statusTostatus", fields: [status], references: [id], map: "Team_status_fkey")
  submission_team_submissionIdTosubmission submission?  @relation("team_submissionIdTosubmission", fields: [submissionId], references: [id], map: "Team_submissionId_fkey")
  user_teammembers                         User[]       @relation("teammembers")

  @@index([leaderId], map: "Team_leaderId_fkey")
  @@index([programId], map: "Team_programId_fkey")
  @@index([status], map: "Team_status_fkey")
  @@index([submissionId], map: "Team_submissionId_fkey")
}

model tempindividu {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique(map: "tempIndividu_userId_key")
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], map: "tempIndividu_userId_fkey")
}

enum Institution {
  UNIV
  HSC
}

enum staff_role {
  Admin
  BMC_Admin
  BCL_Admin
  IBCC_Admin
  IBPC_Admin
  CHAMBERS_Admin
  COMPANY_VISIT_Admin
  IC_Admin
  PO
}

enum submission_stage {
  REGISTRATION
  SEMINAR
  FINAL
}
