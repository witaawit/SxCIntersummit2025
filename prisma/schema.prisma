generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int            @id @default(autoincrement())
  googleId         String?        @unique
  name             String
  email            String         @unique
  password         String
  birthdate        DateTime?
  domicile         String?
  institution_name String?
  major            String?
  wa_number        String?
  line_id          String?
  insta_acc        String?
  institution      Institution?
  referralId       Int?
  status           Int            @default(1)
  referral         referral?      @relation(fields: [referralId], references: [id])
  createdAt        DateTime       @default(now())
  role             String         @default("USER")
  leadingTeam      Team[]         @relation("TeamLeader")
  notification     Notification[]
  tempIndividu     tempIndividu?
  SeminarReg       SeminarReg[]
  TeamMember       TeamMember[]
  Submission       Submission[]
  statuscode       status         @relation(fields: [status], references: [id])

  @@index([institution])
  @@map("user")
}

model Staff {
  id           Int            @id @default(autoincrement())
  name         String
  email        String         @unique
  password     String
  role         StaffRole
  divisionId   Int
  createdAt    DateTime       @default(now())
  divisions    Division       @relation(fields: [divisionId], references: [id])
  Notification Notification[]
}

model Division {
  id       Int        @id @default(autoincrement())
  name     String     @unique
  staff    Staff[]
  referral referral[]
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  title     String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  staffId   Int
  purpose   purpose
  user      User     @relation(fields: [userId], references: [id])
  staff     Staff    @relation(fields: [staffId], references: [id])
}

model tempIndividu {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model Team {
  id             Int          @id @default(autoincrement())
  name           String       @unique
  code           String       @unique
  createdAt      DateTime     @default(now())
  leaderId       Int
  programId      Int
  status         Int          @default(2)
  score          Float?
  programcode    Program      @relation(fields: [programId], references: [id])
  statuscode     status       @relation(fields: [status], references: [id])
  leader         User         @relation("TeamLeader", fields: [leaderId], references: [id])
  submissionTeam Submission[]
  TeamMember     TeamMember[]
}

model status {
  id          Int          @id @default(autoincrement())
  code        String       @unique
  description String
  teams       Team[]
  SeminarReg  SeminarReg[]
  user        User[]

  @@index([code])
}

model Program {
  id            Int          @id @default(autoincrement())
  name          String       @unique
  type          Programtype
  teams         Team[]
  registrations SeminarReg[]
  Submission    Submission[]
}

model SeminarReg {
  id           Int          @id @default(autoincrement())
  userId       Int
  programId    Int
  status       Int
  registeredAt DateTime     @default(now())
  user         User         @relation(fields: [userId], references: [id])
  program      Program      @relation(fields: [programId], references: [id])
  statuscode   status       @relation(fields: [status], references: [id])
  submission   Submission[]
}

model Submission {
  id           Int              @id @default(autoincrement())
  seminarId    Int?
  teamId       Int?
  userId       Int?
  stage        stages
  event        String
  type         submitType
  programId    Int?
  program      Program?         @relation(fields: [programId], references: [id])
  submittedAt  DateTime         @default(now())
  registration SeminarReg?      @relation(fields: [seminarId], references: [id])
  teamcode     Team?            @relation(fields: [teamId], references: [id])
  user         User?            @relation(fields: [userId], references: [id])
  Files        SubmissionFile[]

  @@index([stage])
  @@index([type])
}

model SubmissionFile {
  id           Int         @id @default(autoincrement())
  submissionId Int?
  fileType     String
  filePath     String // URL/path ke file di Google Drive atau storage lain
  fileSize     Int? // optional ukuran file dalam bytes
  mimeType     String? // tipe MIME file
  uploadedAt   DateTime    @default(now())
  submission   Submission? @relation(fields: [submissionId], references: [id])
}

model PendingUserVerification {
  id          Int       @id @default(autoincrement())
  name        String?
  email       String    @unique
  password    String?
  referral    String?
  otp         String
  otpSentAt   DateTime  @default(now())
  otpTries    Int       @default(0)
  purpose     String
  referralrel referral? @relation(fields: [referral], references: [code])
}

model referral {
  id                      Int                       @id @default(autoincrement())
  code                    String                    @unique
  divisionId              Int?
  createdAt               DateTime                  @default(now())
  division                Division?                 @relation(fields: [divisionId], references: [id])
  user                    User[]
  PendingUserVerification PendingUserVerification[]
}

model blacklist {
  id        Int      @id @default(autoincrement())
  token     String   @unique @db.VarChar(500)
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model TeamMember {
  teamId Int
  userId Int

  team Team @relation(fields: [teamId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@id([teamId, userId])
  @@map("teammember")
}

enum stages {
  REGISTRATION
  SEMINAR
  FINAL
}

enum Institution {
  UNIV
  HSC
}

enum StaffRole {
  ADMIN
  BMC_ADMIN
  BCL_ADMIN
  IBCC_ADMIN
  IBPC_ADMIN
  CHAMBERS_ADMIN
  COMPANY_VISIT_ADMIN
  IC_ADMIN
  PO
}

enum Programtype {
  EVENT
  COMPETITION
}

enum purpose {
  NOTIFICATION @map("notification")
  ANNOUNCEMENT @map("Announcement")
}

// enum event {
//   PROFILE
//   BMC
//   BCL
//   IBCC
//   IBPC
//   CHAMBERS
//   COMPANY_VISIT
//   IC
// }

enum submitType {
  IDCARD
  PAYMENT
  TASK
  PROMOTION
}
